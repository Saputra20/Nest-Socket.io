<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Chat App</title>

    <style>
      body {
        margin: 0;
        padding: 0;
        font-family: Arial, sans-serif;
      }

      .chat-container {
        display: flex;
        max-width: 1200px;
        margin: 0 auto;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }

      .rooms-list {
        flex: 1;
        padding: 15px;
        background-color: #f1f1f1;
        border-right: 1px solid #ccc;
      }

      .rooms-list h2 {
        margin-bottom: 10px;
      }

      .rooms-list ul {
        list-style: none;
        padding: 0;
        margin: 0;
      }

      .rooms-list li {
        padding: 10px;
        cursor: pointer;
        transition: background-color 0.3s;
      }

      .rooms-list li.active {
        background-color: #ddd;
      }

      .chat-room {
        flex: 2;
        padding: 15px;
      }

      .chat-header h2 {
        margin: 0;
      }

      .chat-messages {
        margin-top: 20px;
      }

      .message {
        margin-bottom: 15px;
        display: flex;
        justify-content: flex-start;
      }

      .incoming .message-content {
        background-color: #f1f0f0;
        padding: 10px;
        border-radius: 5px;
      }

      .outgoing {
        justify-content: flex-end;
      }

      .outgoing .message-content {
        background-color: #007bff;
        color: #fff;
        padding: 10px;
        border-radius: 5px;
      }

      .chat-input {
        display: flex;
        margin-top: 20px;
      }

      .chat-input textarea {
        flex: 1;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        resize: none;
      }

      .chat-input button {
        padding: 10px 20px;
        background-color: #007bff;
        color: #fff;
        border: none;
        border-radius: 5px;
        cursor: pointer;
      }

      .btn {
        padding: 10px 20px;
        background-color: #007bff;
        color: #fff;
        border: none;
        border-radius: 5px;
        cursor: pointer;
      }

      #snackbar {
        visibility: hidden;
        min-width: 250px;
        margin-left: -125px;
        background-color: #333;
        color: #fff;
        text-align: center;
        border-radius: 2px;
        padding: 16px;
        position: fixed;
        z-index: 1;
        left: 50%;
        bottom: 30px;
        font-size: 17px;
      }

      #snackbar.show {
        visibility: visible;
        -webkit-animation: fadein 0.5s, fadeout 0.5s 2.5s;
        animation: fadein 0.5s, fadeout 0.5s 2.5s;
      }

      @-webkit-keyframes fadein {
        from {
          bottom: 0;
          opacity: 0;
        }
        to {
          bottom: 30px;
          opacity: 1;
        }
      }

      @keyframes fadein {
        from {
          bottom: 0;
          opacity: 0;
        }
        to {
          bottom: 30px;
          opacity: 1;
        }
      }

      @-webkit-keyframes fadeout {
        from {
          bottom: 30px;
          opacity: 1;
        }
        to {
          bottom: 0;
          opacity: 0;
        }
      }

      @keyframes fadeout {
        from {
          bottom: 30px;
          opacity: 1;
        }
        to {
          bottom: 0;
          opacity: 0;
        }
      }
    </style>
  </head>
  <body>
    <div class="chat-container">
      <div class="rooms-list">
        <h2>Chat Rooms</h2>
        <ul id="rooms"></ul>
      </div>

      <div class="chat-room">
        <div class="chat-header" id="room-name">
          <h2>Room Name</h2>
        </div>
        <div
          class="chat-messages"
          id="chat-messages"
          style="padding-top: 50px"
        ></div>

        <div style="text-align: center; display: none" id="join">
          <button class="btn" id="btn-join">Join</button>
        </div>
        <form id="form" action="" class="chat-input" style="display: none">
          <textarea
            placeholder="Type your message"
            id="input"
            autocomplete="off"
          ></textarea>
          <button>Send</button>
        </form>
      </div>
      <div id="snackbar">Some text some message..</div>
    </div>
  </body>
  <script src="/socket.io/socket.io.js"></script>
  <script>
    async function getRooms() {
      try {
        var ul = document.getElementById('rooms');
        const response = await fetch('/room', {
          method: 'GET',
        });

        const rooms = await response.json();

        for (const room of rooms) {
          var li = document.createElement('li');
          var button = document.createElement('a');
          button.innerHTML = room.name;
          button.id = room.channel;
          button.setAttribute('onClick', `detailRoom("${room.channel}")`);

          li.appendChild(button);
          ul.appendChild(li);
        }
      } catch (error) {
        console.error('An error occurred:', error);
      }
    }

    async function detailRoom(channel) {
      try {
        // prepare element
        document.getElementById('form').style.display = 'none';
        document.getElementById('join').style.display = 'none';
        const roomMessages = document.getElementById('chat-messages');

        while (roomMessages.firstChild) {
          roomMessages.removeChild(roomMessages.firstChild);
        }
        var ul = document.getElementById('rooms');

        // get detail room
        const response = await fetch(`/room/${channel}`, {
          method: 'GET',
        });
        const room = await response.json();

        document.getElementById(
          'room-name',
        ).innerHTML = `<h2>${room.name}</h2>`;
        roomId = room._id;

        // check already join in room or not
        const responseAlreadyJoin = await fetch(`/room/already-join`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ userId: id, roomId: room._id }),
        });
        const alreadyJoin = await responseAlreadyJoin.json();

        // checking
        if (!alreadyJoin) {
          document.getElementById('join').style.display = 'block';
          document
            .getElementById('btn-join')
            .setAttribute('onClick', `joinRoom("${room._id}")`);
        } else {
          const responseMessages = await fetch(
            `/room/conversation/${room._id}`,
            {
              method: 'GET',
            },
          );
          const messages = await responseMessages.json();

          for (const message of messages) {
            const incomingMessageDiv = document.createElement('div');
            incomingMessageDiv.classList.add('message', 'incoming');

            const messageContentDiv = document.createElement('div');
            messageContentDiv.classList.add('message-content');
            messageContentDiv.innerHTML = `<b>${message.name}</b><br><span>${message.message}</span>`;

            incomingMessageDiv.appendChild(messageContentDiv);
            roomMessages.appendChild(incomingMessageDiv);
          }
          window.scrollTo(0, document.body.scrollHeight);

          document.getElementById('form').style.display = 'flex';
        }
      } catch (error) {
        console.error('An error occurred:', error);
      }
    }

    async function joinRoom(roomId) {
      try {
        const response = await fetch(`/room/join`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ userId: id, roomId: roomId }),
        });
        const result = await response.json();

        const responseMessages = await fetch(`/room/conversation/${roomId}`, {
          method: 'GET',
        });
        const messages = await responseMessages.json();
        const roomMessages = document.getElementById('chat-messages');

        while (roomMessages.firstChild) {
          roomMessages.removeChild(roomMessages.firstChild);
        }

        for (const message of messages) {
          const incomingMessageDiv = document.createElement('div');
          incomingMessageDiv.classList.add('message', 'incoming');

          const messageContentDiv = document.createElement('div');
          messageContentDiv.classList.add('message-content');
          messageContentDiv.innerHTML = `<b>${message.name}</b><br><span>${message.message}</span>`;

          incomingMessageDiv.appendChild(messageContentDiv);
          roomMessages.appendChild(incomingMessageDiv);
        }
        window.scrollTo(0, document.body.scrollHeight);

        document.getElementById('join').style.display = 'none';
        document.getElementById('form').style.display = 'flex';
      } catch (error) {
        console.error('An error occurred:', error);
      }
    }

    function toast(msg) {
      var x = document.getElementById('snackbar');
      x.innerHTML = `${msg.name} - ${msg.message}`;
      x.className = 'show';
      setTimeout(function () {
        x.className = x.className.replace('show', '');
      }, 3000);
    }

    getRooms();

    // socket io
    const urlParams = new URLSearchParams(window.location.search);
    const id = urlParams.get('id');
    let roomId = null;

    var socket = io.connect('', { query: `id=${id}` });

    var roomMessages = document.getElementById('chat-messages');
    var form = document.getElementById('form');

    form.addEventListener('submit', function (e) {
      e.preventDefault();
      if (input.value) {
        socket.emit('message', {
          userId: id,
          message: input.value,
          roomId: roomId,
        });
        input.value = '';
      }
    });

    socket.on(id, function (msg) {
      if (msg.roomId == roomId) {
        const incomingMessageDiv = document.createElement('div');
        incomingMessageDiv.classList.add('message', 'incoming');

        const messageContentDiv = document.createElement('div');
        messageContentDiv.classList.add('message-content');
        messageContentDiv.innerHTML = `<b>${msg.name}</b><br><span>${msg.message}</span>`;

        incomingMessageDiv.appendChild(messageContentDiv);
        roomMessages.appendChild(incomingMessageDiv);
        window.scrollTo(0, document.body.scrollHeight);
      }
      if(msg.userId !== id) {
        toast(msg);
      }
    });
  </script>
</html>
